import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import pandas as pd
import numpy as np
import aiohttp
from ta.trend import MACD
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volatility import BollingerBands
from ta.volume import OnBalanceVolumeIndicator

# üîê –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏ TwelveData API
BOT_TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
TWELVE_API_KEY = "5e5e950fa71c416e9ffdb86fce72dc4f"

# üéØ –ê–∫—Ç–∏–≤—ã
ASSETS = {
    "BTCUSD": "BTC/USD",
    "XAUUSD": "XAU/USD",
    "USTECH100": "NDX"
}

# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è
user_data = {}

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
    kb.button(text="BTCUSD")
    kb.button(text="XAUUSD")
    kb.button(text="USTECH100")
    kb.button(text="üîï Mute")
    kb.button(text="üîî Unmute")
    kb.button(text="üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: MA+RSI+MACD")
    return kb.as_markup(resize_keyboard=True)


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ OHLC –¥–∞–Ω–Ω—ã—Ö
async def fetch_data(symbol: str):
    url = f"https://api.twelvedata.com/time_series?symbol={symbol}&interval=15min&outputsize=100&apikey={TWELVE_API_KEY}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as r:
            data = await r.json()
            if 'values' not in data:
                return None
            df = pd.DataFrame(data['values'])
            df = df.rename(columns={"datetime": "time"})
            df["time"] = pd.to_datetime(df["time"])
            df = df.sort_values("time")
            df.set_index("time", inplace=True)
            df = df.astype(float)
            return df


# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
def get_signal(df: pd.DataFrame, strategy: str):
    close = df['close']
    ma10 = close.rolling(window=10).mean()
    ma50 = close.rolling(window=50).mean()
    macd = MACD(close).macd_diff()
    rsi = RSIIndicator(close).rsi()

    agree = 0
    signal = "Hold"

    if ma10.iloc[-1] > ma50.iloc[-1]:
        agree += 1
    if macd.iloc[-1] > 0:
        agree += 1
    if rsi.iloc[-1] > 50:
        agree += 1

    if agree == 3:
        signal = "Buy"
        confidence = 75
    elif agree == 0:
        signal = "Sell"
        confidence = 75
    elif agree == 2:
        signal = "ind: 2/3"
        confidence = 65
    else:
        signal = "Hold"
        confidence = 50

    price = close.iloc[-1]
    tp = price * 1.02
    sl = price * 0.98

    return {
        "direction": signal,
        "confidence": confidence,
        "entry": round(price, 2),
        "tp_price": round(tp, 2),
        "sl_price": round(sl, 2),
        "tp_pct": "2%",
        "sl_pct": "2%"
    }


# ‚úÖ –°—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start(message: Message):
    user_data[message.from_user.id] = {"asset": "BTCUSD", "muted": False, "strategy": "MA+RSI+MACD"}
    await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã", reply_markup=get_keyboard())


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_message(message: Message):
    uid = message.from_user.id
    text = message.text.strip()

    if uid not in user_data:
        user_data[uid] = {"asset": "BTCUSD", "muted": False, "strategy": "MA+RSI+MACD"}

    if text in ASSETS:
        user_data[uid]["asset"] = text
        await message.answer(f"–ê–∫—Ç–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}")
        return

    if text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        await send_signal(message, uid, manual=True)
        return

    if text == "üîï Mute":
        user_data[uid]["muted"] = True
        await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
        return

    if text == "üîî Unmute":
        user_data[uid]["muted"] = False
        await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
        return

    if "üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è" in text:
        user_data[uid]["strategy"] = "MA+RSI+MACD"
        await message.answer("–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: MA+RSI+MACD")
        return


# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(message: Message, uid: int, manual=False):
    asset = user_data[uid]["asset"]
    df = await fetch_data(asset)
    if df is None or df.empty:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return

    strategy = user_data[uid]["strategy"]
    signal = get_signal(df, strategy)
    confidence = signal["confidence"]

    if manual and confidence < 65:
        await message.answer(f"‚ö†Ô∏è –†–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ—á–Ω–æ—Å—Ç—å: {confidence}%)")
        return

    if not manual and confidence < 70:
        return  # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª

    direction = signal["direction"]
    entry = signal["entry"]
    tp_price = signal["tp_price"]
    sl_price = signal["sl_price"]
    tp_pct = signal["tp_pct"]
    sl_pct = signal["sl_pct"]

    msg = f"""üì° <b>–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ {asset}</b>
<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}
<b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {entry}
<b>üéØ TP:</b> {tp_pct} ‚Üí {tp_price}
<b>üõë SL:</b> {sl_pct} ‚Üí {sl_price}
<b>üìà –¢–æ—á–Ω–æ—Å—Ç—å:</b> {confidence}%
"""
    await message.answer(msg, disable_notification=user_data[uid]["muted"])


# üîÅ –ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω
async def auto_signal_loop():
    while True:
        for uid in user_data:
            chat = user_data[uid]
            df = await fetch_data(chat["asset"])
            if df is None:
                continue
            signal = get_signal(df, chat["strategy"])
            if signal["confidence"] >= 70:
                try:
                    await bot.send_message(
                        uid,
                        f"""üì° <b>–ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª –ø–æ {chat["asset"]}</b>
<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal["direction"]}
<b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {signal["entry"]}
<b>üéØ TP:</b> {signal["tp_pct"]} ‚Üí {signal["tp_price"]}
<b>üõë SL:</b> {signal["sl_pct"]} ‚Üí {signal["sl_price"]}
<b>üìà –¢–æ—á–Ω–æ—Å—Ç—å:</b> {signal["confidence"]}%
""",
                        disable_notification=chat["muted"]
                    )
                except:
                    pass
        await asyncio.sleep(120)  # –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
async def main():
    loop.create_task(auto_signal_loop())
    await dp.start_polling(bot)

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
