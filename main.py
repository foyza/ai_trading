import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
import yfinance as yf
import datetime
import random

TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"

dp = Dispatcher()
bot = Bot(token=TOKEN)

user_state = {}
user_schedule = {}

assets = {
    "BTCUSD": "BTC-USD",
    "XAUUSD": "GC=F",
    "USTECH100": "^NDX"
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
        [KeyboardButton(text="üìà –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤"), KeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è")]
    ],
    resize_keyboard=True
)

async def fetch_data(ticker):
    try:
        data = yf.download(ticker, period="1d", interval="1m")
        return data
    except Exception as e:
        return None

def generate_signal(data):
    if data is None or len(data) < 2:
        return None

    last_price = data["Close"].iloc[-1]
    change = (last_price - data["Close"].iloc[-2]) / data["Close"].iloc[-2]
    accuracy = random.randint(50, 100)  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ML-–º–æ–¥–µ–ª—å

    direction = "Buy" if change > 0 else "Sell"
    tp_pct = 1.5
    sl_pct = 0.8
    entry = round(last_price, 2)

    tp_price = round(entry * (1 + tp_pct/100 if direction == "Buy" else 1 - tp_pct/100), 2)
    sl_price = round(entry * (1 - sl_pct/100 if direction == "Buy" else 1 + sl_pct/100), 2)

    return {
        "entry": entry,
        "direction": direction,
        "tp_pct": tp_pct,
        "sl_pct": sl_pct,
        "tp_price": tp_price,
        "sl_price": sl_price,
        "accuracy": accuracy
    }

def is_in_schedule(user_id):
    schedule = user_schedule.get(user_id, {"start": "00:00", "end": "23:59", "days": list(range(7))})
    now = datetime.datetime.now()
    current_time = now.strftime("%H:%M")
    current_day = now.weekday()

    return schedule["start"] <= current_time <= schedule["end"] and current_day in schedule["days"]

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text == "/start":
        user_state[user_id] = "BTCUSD"
        await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã", reply_markup=keyboard)

    elif text == "üìà –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤":
        markup = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=asset)] for asset in assets.keys()],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:", reply_markup=markup)

    elif text in assets.keys():
        user_state[user_id] = text
        await message.answer(f"–ê–∫—Ç–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}", reply_markup=keyboard)

    elif text == "‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00-17:30)")

    elif "-" in text and ":" in text:
        try:
            start, end = text.split("-")
            user_schedule[user_id] = {
                "start": start.strip(),
                "end": end.strip(),
                "days": list(range(7))
            }
            await message.answer(f"–í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start.strip()} ‚Äî {end.strip()}", reply_markup=keyboard)
        except:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    elif text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        if not is_in_schedule(user_id):
            await message.answer("‚è≥ –°–µ–π—á–∞—Å –≤–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
            return

        asset = user_state.get(user_id, "BTCUSD")
        data = await fetch_data(assets[asset])
        signal = generate_signal(data)

        

        accuracy = signal["accuracy"]
        if accuracy < 60:
            await message.answer(f"‚ö†Ô∏è –†–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ({accuracy}%)")
            return

        if accuracy < 65:
            await message.answer(f"‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 65% ({accuracy}%), —Ä—É—á–Ω–æ–π —Å–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return

        await send_signal(message.chat.id, asset, signal)
async def send_signal(chat_id, asset, signal):
    text = (
        f"üìä –°–∏–≥–Ω–∞–ª –ø–æ –∞–∫—Ç–∏–≤—É: {asset}\n"
        f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['direction']}\n"
        f"üí∞ –í—Ö–æ–¥: {signal['entry']}\n"
        f"üìà TP: +{signal['tp_pct']}% ‚Üí {signal['tp_price']}\n"
        f"üìâ SL: -{signal['sl_pct']}% ‚Üí {signal['sl_price']}\n"
        f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {signal['accuracy']}%"
    )
    await bot.send_message(chat_id, text)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ >70%
async def monitor_signals():
    while True:
        for user_id in user_state.keys():
            if not is_in_schedule(user_id):
                continue

            asset = user_state.get(user_id, "BTCUSD")
            data = await fetch_data(assets[asset])
            signal = generate_signal(data)

            if signal and signal["accuracy"] >= 70:
                await send_signal(user_id, asset, signal)

        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(monitor_signals())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
