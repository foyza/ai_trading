import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, time
import pytz
import numpy as np
import pandas as pd
import yfinance as yf
from binance.client import Client

API_TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
client = Client()  # Binance –±–µ–∑ API –∫–ª—é—á–µ–π
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
UZ_TZ = pytz.timezone("Asia/Tashkent")

# –ö–Ω–æ–ø–∫–∏
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(
    KeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª"),
    KeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
)
main_keyboard.add(
    KeyboardButton("BTCUSDT"),
    KeyboardButton("XAUUSDT"),
    KeyboardButton("NAS100"),
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def get_price_data(symbol):
    try:
        if symbol in ["BTCUSDT", "XAUUSDT"]:
            klines = client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_15MINUTE, limit=100)
            if not klines or len(klines) == 0:
                print(f"[ERROR] Binance –ø—É—Å—Ç–æ–π –¥–ª—è {symbol}")
                return None
            df = pd.DataFrame(klines, columns=[
                "timestamp", "open", "high", "low", "close", "volume",
                "close_time", "quote_asset_volume", "number_of_trades",
                "taker_buy_base_volume", "taker_buy_quote_volume", "ignore"
            ])
            df["close"] = df["close"].astype(float)
            return df

        elif symbol == "NAS100":
            df = yf.download("^NDX", interval="15m", period="1d")
            if df.empty:
                print("[ERROR] yfinance –ø—É—Å—Ç–æ–π –¥–ª—è NAS100")
                return None
            df = df.rename(columns={"Close": "close"})
            return df

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {symbol}: {e}")
        return None

# –≠–º—É–ª—è—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
def generate_signal(df):
    direction = np.random.choice(["Buy", "Sell"])
    entry = df["close"].iloc[-1]
    acc = round(np.random.uniform(50, 90), 2)
    tp_percent, sl_percent = 1.5, 1
    tp_price = entry * (1 + tp_percent/100) if direction == "Buy" else entry * (1 - tp_percent/100)
    sl_price = entry * (1 - sl_percent/100) if direction == "Buy" else entry * (1 + sl_percent/100)
    return {
        "direction": direction,
        "entry": round(entry, 2),
        "tp_percent": tp_percent,
        "sl_percent": sl_percent,
        "tp_price": round(tp_price, 2),
        "sl_price": round(sl_price, 2),
        "accuracy": acc
    }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def is_within_schedule(user_id, symbol):
    now = datetime.now(UZ_TZ).time()
    schedule = user_states.get(user_id, {}).get("schedule", {}).get(symbol, "00:00-23:59")
    try:
        start_str, end_str = schedule.split("-")
        start = time.fromisoformat(start_str)
        end = time.fromisoformat(end_str)
        return start <= now <= end
    except:
        return True  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(commands=["start"])
async def start(message: types.Message):
    user_states[message.chat.id] = {
        "symbol": "BTCUSDT",
        "schedule": {
            "BTCUSDT": "00:00-23:59",
            "XAUUSDT": "00:00-23:59",
            "NAS100": "00:00-23:59"
        }
    }
    await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message()
async def handle_buttons(message: types.Message):
    user_id = message.chat.id
    text = message.text

    if text in ["BTCUSDT", "XAUUSDT", "NAS100"]:
        user_states[user_id]["symbol"] = text
        await message.answer(f"üìà –ê–∫—Ç–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}")

    elif text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        await handle_signal_request(message)

    elif text == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 09:00-17:00 –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–∞.")

    elif "-" in text and ":" in text:
        symbol = user_states[user_id]["symbol"]
        user_states[user_id]["schedule"][symbol] = text
        await message.answer(f"üïí –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def handle_signal_request(message):
    user_id = message.chat.id
    symbol = user_states.get(user_id, {}).get("symbol", "BTCUSDT")

    if not is_within_schedule(user_id, symbol):
        await message.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è.")
        return

    df = get_price_data(symbol)
    if df is None:
        await message.answer(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ {symbol} –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")
        return

    signal = generate_signal(df)
    acc = signal["accuracy"]

    if acc < 60:
        await message.answer(f"‚ö†Ô∏è –†–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ({acc}%)")
        return
    elif acc < 65:
        await message.answer(f"üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {acc}%. –°–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
    msg = (
        f"<b>üìä –°–∏–≥–Ω–∞–ª –ø–æ {symbol}</b>\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{signal['direction']}</b>\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{signal['entry']}</b>\n"
        f"üéØ TP: {signal['tp_percent']}% ({signal['tp_price']})\n"
        f"üõë SL: {signal['sl_percent']}% ({signal['sl_price']})\n"
        f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{acc}%</b>"
    )
    await message.answer(msg)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP/SL
    current_price = df["close"].iloc[-1]
    if (signal["direction"] == "Buy" and current_price >= signal["tp_price"]) or \
       (signal["direction"] == "Sell" and current_price <= signal["tp_price"]):
        await message.answer("‚úÖ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
    elif (signal["direction"] == "Buy" and current_price <= signal["sl_price"]) or \
         (signal["direction"] == "Sell" and current_price >= signal["sl_price"]):
        await message.answer("‚ùå SL —Å—Ä–∞–±–æ—Ç–∞–ª!")

# –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ >70%
async def auto_signal_loop():
    while True:
        for user_id in user_states:
            symbol = user_states[user_id]["symbol"]
            if not is_within_schedule(user_id, symbol):
                continue
            df = get_price_data(symbol)
            if df is None:
                continue
            signal = generate_signal(df)
            acc = signal["accuracy"]
            if acc >= 70:
                msg = (
                    f"<b>üìä –°–∏–≥–Ω–∞–ª –ø–æ {symbol}</b>\n"
                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{signal['direction']}</b>\n"
                    f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{signal['entry']}</b>\n"
                    f"üéØ TP: {signal['tp_percent']}% ({signal['tp_price']})\n"
                    f"üõë SL: {signal['sl_percent']}% ({signal['sl_price']})\n"
                    f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{acc}%</b>"
                )
                await bot.send_message(chat_id=user_id, text=msg)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP/SL
                current_price = df["close"].iloc[-1]
                if (signal["direction"] == "Buy" and current_price >= signal["tp_price"]) or \
                   (signal["direction"] == "Sell" and current_price <= signal["tp_price"]):
                    await bot.send_message(user_id, "‚úÖ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                elif (signal["direction"] == "Buy" and current_price <= signal["sl_price"]) or \
                     (signal["direction"] == "Sell" and current_price >= signal["sl_price"]):
                    await bot.send_message(user_id, "‚ùå SL —Å—Ä–∞–±–æ—Ç–∞–ª!")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫
async def main():
    asyncio.create_task(auto_signal_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
