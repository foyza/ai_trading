import asyncio
import random
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import yfinance as yf
from binance import Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
BINANCE_API_KEY = "your_api_key"
BINANCE_API_SECRET = "your_api_secret"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_API_SECRET)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_assets = {}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã
ASSETS = ["BTCUSD", "XAUUSD", "USTECH100"]

# –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
def get_market_price(asset):
    try:
        if asset == "BTCUSD":
            ticker = client.get_symbol_ticker(symbol="BTCUSDT")
            return float(ticker["price"])
        elif asset == "XAUUSD":
            ticker = client.get_symbol_ticker(symbol="XAUUSDT")
            return float(ticker["price"])
        elif asset == "USTECH100":
            data = yf.Ticker("^NDX").history(period="1d")
            return float(data["Close"][-1])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {asset}: {e}")
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
def generate_signal(asset):
    price = get_market_price(asset)
    if not price:
        return None
    direction = random.choice(["Buy", "Sell"])
    accuracy = round(random.uniform(60, 95), 2)
    tp = price * (1 + 0.02) if direction == "Buy" else price * (1 - 0.02)
    sl = price * (1 - 0.015) if direction == "Buy" else price * (1 + 0.015)
    return {
        "asset": asset,
        "direction": direction,
        "entry": round(price, 2),
        "tp": round(tp, 2),
        "sl": round(sl, 2),
        "accuracy": accuracy,
    }

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def format_signal(signal, auto=False):
    prefix = "üîî <b>–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª</b>" if auto else "üîî <b>–°–∏–≥–Ω–∞–ª</b>"
    return (
        f"{prefix} –ø–æ <b>{signal['asset']}</b> ({signal['direction']})\n"
        f"üéØ –í—Ö–æ–¥: <b>{signal['entry']}</b>\n"
        f"üìà TP: <b>{signal['tp']}</b> (+2%)\n"
        f"üìâ SL: <b>{signal['sl']}</b> (-1.5%)\n"
        f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{signal['accuracy']}%</b>"
    )

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞
def asset_keyboard():
    kb = InlineKeyboardBuilder()
    for asset in ASSETS:
        kb.button(text=asset, callback_data=f"asset:{asset}")
    return kb.as_markup()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã!", reply_markup=asset_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query(F.data.startswith("asset:"))
async def asset_chosen(callback: CallbackQuery):
    asset = callback.data.split(":")[1]
    user_assets[callback.from_user.id] = asset
    signal = generate_signal(asset)
    if not signal:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ç–∏–≤–∞.")
        return
    if signal["accuracy"] >= 65:
        await callback.message.answer(format_signal(signal))
    else:
        await callback.message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ({signal['accuracy']}%). –°–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (–µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å > 70%)
async def auto_signal():
    await asyncio.sleep(5)
    while True:
        try:
            for asset in ASSETS:
                signal = generate_signal(asset)
                if signal and signal["accuracy"] >= 70:
                    await bot.send_message(chat_id="@foyzas_bot", text=format_signal(signal, auto=True))
        except Exception as e:
            print(f"[auto_signal error] {e}")
        await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç
        

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(auto_signal())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
