import asyncio
import datetime
import random
import yfinance as yf
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message

API_TOKEN = '8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
user_settings = {
    "asset": "BTC-USD",
    "schedule": {"start": "00:00", "end": "23:59"}
}

assets = {
    "BTCUSD": "BTC-USD",
    "XAUUSD": "GC=F",
    "USTECH100": "^NDX"
}

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
        [KeyboardButton(text="üìà –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤"), KeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è")]
    ],
    resize_keyboard=True
)

asset_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="BTCUSD"), KeyboardButton(text="XAUUSD")],
        [KeyboardButton(text="USTECH100"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

time_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚è∞ –í—Ä–µ–º—è: 09:00-17:00"), KeyboardButton(text="‚è∞ –í—Ä–µ–º—è: 00:00-23:59")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

def in_schedule():
    now = datetime.datetime.now().time()
    start = datetime.datetime.strptime(user_settings['schedule']['start'], "%H:%M").time()
    end = datetime.datetime.strptime(user_settings['schedule']['end'], "%H:%M").time()
    return start <= now <= end

def fetch_price(symbol):
    data = yf.download(tickers=symbol, period="1d", interval="1m")
    if data.empty:
        return None
    return round(data['Close'][-1], 2)

def predict_signal():
    accuracy = round(random.uniform(50, 100), 2)
    direction = random.choice(["Buy", "Sell"])
    tp_pct = round(random.uniform(1.0, 3.0), 2)
    sl_pct = round(random.uniform(0.5, 2.0), 2)
    return accuracy, direction, tp_pct, sl_pct

def format_signal(asset, accuracy, direction, entry, tp_pct, sl_pct):
    tp_price = round(entry * (1 + tp_pct/100 if direction == "Buy" else 1 - tp_pct/100), 2)
    sl_price = round(entry * (1 - sl_pct/100 if direction == "Buy" else 1 + sl_pct/100), 2)
    return (
        f"üì° <b>–°–∏–≥–Ω–∞–ª –ø–æ {asset}</b>\n"
        f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{direction}</b>\n"
        f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{accuracy}%</b>\n"
        f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{entry}</b>\n"
        f"‚úÖ TP: <b>{tp_pct}%</b> ‚Üí <b>{tp_price}</b>\n"
        f"‚ùå SL: <b>{sl_pct}%</b> ‚Üí <b>{sl_price}</b>"
    )

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã üß†üí•", reply_markup=keyboard)

@dp.message(lambda msg: msg.text == "üìà –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤")
async def choose_asset(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:", reply_markup=asset_keyboard)

@dp.message(lambda msg: msg.text == "‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è")
async def choose_time(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard)

@dp.message(lambda msg: msg.text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
async def manual_signal(message: Message):
    if not in_schedule():
        await message.answer("‚è± –°–µ–π—á–∞—Å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è.")
        return
    accuracy, direction, tp, sl = predict_signal()
    price = fetch_price(user_settings["asset"])
    if not price:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É.")
        return
    if accuracy >= 65:
        text = format_signal(user_settings["asset"], accuracy, direction, price, tp, sl)
        await message.answer(text, parse_mode=ParseMode.HTML)
    elif accuracy < 60:
        await message.answer(f"‚ö†Ô∏è –†–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}%)")

@dp.message(lambda msg: msg.text in assets)
async def set_asset(message: Message):
    user_settings["asset"] = assets[message.text]
    await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=keyboard)

@dp.message(lambda msg: msg.text.startswith("‚è∞ –í—Ä–µ–º—è:"))
async def set_time(message: Message):
time_range = message.text.split(": ")[1]
    start, end = time_range.split("-")
    user_settings["schedule"] = {"start": start, "end": end}
    await message.answer(f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start}-{end}", reply_markup=keyboard)

@dp.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await message.answer("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

async def auto_signal_loop():
    while True:
        if in_schedule():
            accuracy, direction, tp, sl = predict_signal()
            if accuracy > 70:
                price = fetch_price(user_settings["asset"])
                if price:
                    text = format_signal(user_settings["asset"], accuracy, direction, price, tp, sl)
                    await bot.send_message(chat_id=813631865, text=text, parse_mode=ParseMode.HTML)
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    asyncio.create_task(auto_signal_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
