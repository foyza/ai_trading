import asyncio
import random
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
import yfinance as yf
from binance import Client

TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
BINANCE_API_KEY = "your_api_key"
BINANCE_API_SECRET = "your_api_secret"

bot = Bot(token=TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_API_SECRET)

user_assets = {}

ASSETS = ["BTCUSD", "XAUUSD", "USTECH100"]

# –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ Binance –∏–ª–∏ Yahoo
def get_market_price(asset):
    if asset == "BTCUSD":
        ticker = client.get_symbol_ticker(symbol="BTCUSDT")
        return float(ticker["price"])
    elif asset == "XAUUSD":
        ticker = client.get_symbol_ticker(symbol="XAUUSDT")
        return float(ticker["price"])
    elif asset == "USTECH100":
        data = yf.Ticker("^NDX").history(period="1d")
        return float(data["Close"][-1])
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å –ø—Å–µ–≤–¥–æ–ø—Ä–æ–≥–Ω–æ–∑–æ–º
def generate_signal(asset):
    price = get_market_price(asset)
    direction = random.choice(["Buy", "Sell"])
    accuracy = round(random.uniform(60, 95), 2)
    tp = price * (1 + 0.02) if direction == "Buy" else price * (1 - 0.02)
    sl = price * (1 - 0.015) if direction == "Buy" else price * (1 + 0.015)
    return {
        "asset": asset,
        "direction": direction,
        "entry": round(price, 2),
        "tp": round(tp, 2),
        "sl": round(sl, 2),
        "accuracy": accuracy,
    }

# –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
def format_signal(signal, auto=False):
    prefix = "üîî <b>–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª</b>" if auto else "üîî <b>–°–∏–≥–Ω–∞–ª</b>"
    return (
        f"{prefix} –ø–æ <b>{signal['asset']}</b> ({signal['direction']})\n"
        f"üéØ –í—Ö–æ–¥: <b>{signal['entry']}</b>\n"
        f"üìà TP: <b>{signal['tp']}</b> (+2%)\n"
        f"üìâ SL: <b>{signal['sl']}</b> (-1.5%)\n"
        f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{signal['accuracy']}%</b>"
    )

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞
def asset_keyboard():
    kb = InlineKeyboardBuilder()
    for asset in ASSETS:
        kb.button(text=asset, callback_data=f"asset:{asset}")
    return kb.as_markup()

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã!", reply_markup=asset_keyboard())

@dp.callback_query(F.data.startswith("asset:"))
async def asset_chosen(callback: types.CallbackQuery):
    asset = callback.data.split(":")[1]
    user_assets[callback.from_user.id] = asset
    signal = generate_signal(asset)
    if signal["accuracy"] >= 65:
        await callback.message.answer(format_signal(signal))
    else:
        await callback.message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ({signal['accuracy']}%). –°–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ >70% —Ç–æ—á–Ω–æ—Å—Ç–∏
async def auto_signal():
    while True:
        for asset in ASSETS:
            signal = generate_signal(asset)
            if signal["accuracy"] >= 70:
                await bot.send_message(chat_id="@foyzas_bot", text=format_signal(signal, auto=True))
        await asyncio.sleep(60)

async def main():
    asyncio.create_task(auto_signal())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
