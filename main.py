import asyncio
import random
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import yfinance as yf
from datetime import datetime
import pytz

TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

ASSETS = ["BTCUSD", "XAUUSD", "USTECH100"]
user_data = {}  # {user_id: {"asset": ..., "schedule": [(start, end), ...]}}

# --- –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ Yahoo Finance ---
def get_market_price(asset):
    symbol_map = {
        "BTCUSD": "BTC-USD",
        "XAUUSD": "GC=F",
        "USTECH100": "^NDX",
    }
    ticker = symbol_map.get(asset)
    if not ticker:
        return None
    data = yf.Ticker(ticker).history(period="1d", interval="1m")
    if data.empty:
        return None
    return float(data["Close"].iloc[-1])

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ ---
def generate_signal(asset):
    price = get_market_price(asset)
    if price is None:
        return None
    direction = random.choice(["Buy", "Sell"])
    accuracy = round(random.uniform(60, 95), 2)
    tp = price * (1 + 0.02) if direction == "Buy" else price * (1 - 0.02)
    sl = price * (1 - 0.015) if direction == "Buy" else price * (1 + 0.015)
    return {
        "asset": asset,
        "direction": direction,
        "entry": round(price, 2),
        "tp": round(tp, 2),
        "sl": round(sl, 2),
        "accuracy": accuracy,
    }

# --- –§–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª–∞ ---
def format_signal(signal, auto=False):
    prefix = "üîî <b>–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª</b>" if auto else "üîî <b>–°–∏–≥–Ω–∞–ª</b>"
    return (
        f"{prefix} –ø–æ <b>{signal['asset']}</b> ({signal['direction']})\n"
        f"üéØ –í—Ö–æ–¥: <b>{signal['entry']}</b>\n"
        f"üìà TP: <b>{signal['tp']}</b> (+2%)\n"
        f"üìâ SL: <b>{signal['sl']}</b> (-1.5%)\n"
        f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{signal['accuracy']}%</b>"
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def is_within_schedule(user_id):
    schedule = user_data.get(user_id, {}).get("schedule")
    if not schedule:
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ–≥–¥–∞
    now = datetime.now(pytz.timezone("Asia/Tashkent")).time()
    for start, end in schedule:
        if start <= now <= end:
            return True
    return False

# --- –ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ ---
@dp.message(F.text == "/start")
async def start(message: Message):
    user_data[message.from_user.id] = {
        "asset": "BTCUSD",
        "schedule": [],
    }
    await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã!", reply_markup=asset_keyboard())

@dp.message(F.text == "/change_asset")
async def change_asset(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:", reply_markup=asset_keyboard())

@dp.message(F.text == "/change_schedule")
async def change_schedule(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=schedule_keyboard())

# --- –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–æ–≤ ---
def asset_keyboard():
    kb = InlineKeyboardBuilder()
    for asset in ASSETS:
        kb.button(text=asset, callback_data=f"asset:{asset}")
    return kb.as_markup()

# --- –ö–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
def schedule_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", callback_data="schedule:all"),
            InlineKeyboardButton(text="9:00‚Äì18:00", callback_data="schedule:9_18"),
        ],
        [
            InlineKeyboardButton(text="10:00‚Äì22:00", callback_data="schedule:10_22"),
            InlineKeyboardButton(text="–í—ã—Ö–æ–¥–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã", callback_data="schedule:weekdays"),
        ]
    ])

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞ ---
@dp.callback_query(F.data.startswith("asset:"))
async def asset_chosen(callback: CallbackQuery):
    asset = callback.data.split(":")[1]
    user_data.setdefault(callback.from_user.id, {})["asset"] = asset
    signal = generate_signal(asset)
    if signal and signal["accuracy"] >= 65:
        await callback.message.answer(format_signal(signal))
    else:
        await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
@dp.callback_query(F.data.startswith("schedule:"))
async def schedule_chosen(callback: CallbackQuery):
    user_id = callback.from_user.id
    key = callback.data.split(":")[1]
    if key == "all":
        schedule = []
    elif key == "9_18":
        schedule = [(datetime.strptime("09:00", "%H:%M").time(),
                     datetime.strptime("18:00", "%H:%M").time())]
    elif key == "10_22":
        schedule = [(datetime.strptime("10:00", "%H:%M").time(),
                     datetime.strptime("22:00", "%H:%M").time())]
    elif key == "weekdays":
        # –ú–æ–∂–Ω–æ –ø–æ–∑–∂–µ —É—á–µ—Å—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        schedule = [(datetime.strptime("09:00", "%H:%M").time(),
                     datetime.strptime("18:00", "%H:%M").time())]
    else:
        schedule = []
    user_data.setdefault(user_id, {})["schedule"] = schedule
    await callback.message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

# --- –¶–∏–∫–ª –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤ ---
async def auto_signal_loop():
    while True:
        for user_id, data in user_data.items():
            asset = data.get("asset", "BTCUSD")
            if is_within_schedule(user_id):
                signal = generate_signal(asset)
                if signal and signal["accuracy"] >= 70:
                    try:
                        await bot.send_message(chat_id=user_id, text=format_signal(signal, auto=True))
                    except:
                        pass
        await asyncio.sleep(60)

# --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
async def main():
    asyncio.create_task(auto_signal_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
