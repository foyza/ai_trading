import asyncio
import random
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import matplotlib.pyplot as plt
import os

import logging
import sys

logging.basicConfig(stream=sys.stdout, level=logging.INFO)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
import os
TOKEN = os.getenv("8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA")
AUTO_SIGNAL_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç
USER_REQUEST_LIMIT = 2
USER_REQUEST_WINDOW = 300  # 5 –º–∏–Ω—É—Ç
DEFAULT_HOURS = (0, 24)
DEFAULT_DAYS = list(range(7))  # 0-6, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
TRADABLE_ASSETS = ["BTCUSD", "XAUUSD", "USTECH100"]

bot = Bot(token=TOKEN)
dp = Dispatcher()
user_requests = {}
user_trading_hours = {}  # {user_id: {"BTCUSD": {"hours": (8, 21), "days": [0,1,2,3,4,5,6]}}}

# --- AI –º–æ–¥–µ–ª—å (–∑–∞–≥–ª—É—à–∫–∞) ---
def predict_signal(asset):
    accuracy = random.uniform(0.65, 0.95)
    if accuracy < 0.7:
        return {"accuracy": accuracy}

    direction = random.choice(["BUY", "SELL"])
    return {
        "direction": direction,
        "take_profit": round(random.uniform(0.5, 2.0), 2),
        "stop_loss": round(random.uniform(0.3, 1.5), 2),
        "accuracy": accuracy
    }

# --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ ---
def draw_chart(asset, direction, tp, sl):
    x = list(range(10))
    y = [i + (0.1 if direction == "BUY" else -0.1) * i for i in x]

    plt.figure(figsize=(6, 3))
    plt.plot(x, y, label=direction)
    plt.axhline(y[-1] + tp, color='green', linestyle='--', label='TP')
    plt.axhline(y[-1] - sl, color='red', linestyle='--', label='SL')
    plt.title(f"{asset} Signal")
    plt.legend()

    filename = f"{asset}_chart.png"
    plt.savefig(filename)
    plt.close()
    return filename

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ ---
async def generate_signal(asset):
    signal_data = predict_signal(asset)
    if signal_data["accuracy"] < 0.7:
        return None, None

    tp = signal_data['take_profit']
    sl = signal_data['stop_loss']
    direction = signal_data['direction']
    chart_path = draw_chart(asset, direction, tp, sl)

    signal_msg = f"üìà {asset}\n"                  f"üîπ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"                  f"üéØ TP: {tp}\n"                  f"üõë SL: {sl}\n"                  f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {int(signal_data['accuracy'] * 100)}%"

    return signal_msg, chart_path

# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä—É—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º ---
def can_user_request(user_id):
    now = time.time()
    requests = user_requests.get(user_id, [])
    requests = [r for r in requests if now - r < USER_REQUEST_WINDOW]
    if len(requests) >= USER_REQUEST_LIMIT:
        return False
    requests.append(now)
    user_requests[user_id] = requests
    return True

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ ---
def is_asset_active(asset, user_id):
    now = datetime.now()
    hour = now.hour
    weekday = now.weekday()

    settings = user_trading_hours.get(user_id, {}).get(asset, {})
    hours = settings.get("hours", DEFAULT_HOURS)
    days = settings.get("days", DEFAULT_DAYS)

    return hours[0] <= hour < hours[1] and weekday in days

# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---
@dp.message(Command("start"))
async def start_cmd(msg: types.Message):
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç!\n"
                     "–ö–æ–º–∞–Ω–¥—ã:\n"
                     "/signal ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª\n"
                     "/sethours ASSET START END ‚Äî —á–∞—Å—ã\n"
                     "/setdays ASSET DAYS ‚Äî –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0 1 2 3 4)")

@dp.message(Command("signal"))
async def signal_cmd(msg: types.Message):
    user_id = msg.from_user.id
    if not can_user_request(user_id):
        await msg.answer("‚õîÔ∏è –ù–µ –±–æ–ª–µ–µ 2 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 –º–∏–Ω—É—Ç.")
        return

    await msg.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞...")
    asset = "BTCUSD"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    signal, chart = await generate_signal(asset)
    if not signal:
        await msg.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞.")
        return

    await msg.answer_photo(types.FSInputFile(chart), caption=signal)

@dp.message(Command("sethours"))
async def set_hours_cmd(msg: types.Message):
    parts = msg.text.split()
    if len(parts) != 4:
        await msg.answer("–§–æ—Ä–º–∞—Ç: /sethours ASSET START END")
        return

    asset, start, end = parts[1], int(parts[2]), int(parts[3])

    if asset not in TRADABLE_ASSETS:
        await msg.answer("‚õîÔ∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∞–∫—Ç–∏–≤.")
        return

    user_id = msg.from_user.id
    if user_id not in user_trading_hours:
        user_trading_hours[user_id] = {}
    if asset not in user_trading_hours[user_id]:
        user_trading_hours[user_id][asset] = {}
    user_trading_hours[user_id][asset]["hours"] = (start, end)

    await msg.answer(f"‚úÖ –ß–∞—Å—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {asset} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {start}:00 - {end}:00")

@dp.message(Command("setdays"))
async def set_days_cmd(msg: types.Message):
    parts = msg.text.split()
    if len(parts) < 3:
        await msg.answer("–§–æ—Ä–º–∞—Ç: /setdays ASSET D1 D2 D3 ... (0=–ü–Ω, 6=–í—Å)")
        return

    asset = parts[1]
    days = list(map(int, parts[2:]))
    user_id = msg.from_user.id

    if user_id not in user_trading_hours:
        user_trading_hours[user_id] = {}
    if asset not in user_trading_hours[user_id]:
        user_trading_hours[user_id][asset] = {}
    user_trading_hours[user_id][asset]["days"] = days

    await msg.answer(f"‚úÖ –î–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {asset} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(map(str, days))}")

# --- –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã ---
async def auto_signal_loop():
    await asyncio.sleep(5)
    while True:
        now = datetime.now()
        for asset in TRADABLE_ASSETS:
            for user_id in user_trading_hours.keys():
                if is_asset_active(asset, user_id):
                    signal, chart = await generate_signal(asset)
                    if signal:
                        try:
                            await bot.send_photo(chat_id=user_id, photo=types.FSInputFile(chart), caption=signal)
                        except Exception as e:
                            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)
        await asyncio.sleep(AUTO_SIGNAL_INTERVAL)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(auto_signal_loop())
    await dp.start_polling(bot)

if name == "__main__":
    asyncio.run(main())
