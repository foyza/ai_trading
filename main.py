import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from datetime import datetime

TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
bot = Bot(token=TOKEN)
dp = Dispatcher()

TRADABLE_ASSETS = ["BTCUSD", "XAUUSD", "USTECH100"]
user_trading_hours = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
@dp.message(Command("start"))
async def start_cmd(msg: Message):
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìà –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
        [KeyboardButton(text="üìä –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤")]
    ], resize_keyboard=True)
    await msg.answer("–ü–æ—Ä–∞ –≤—ã–±–µ—Ä–µ—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=kb)

# –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
@dp.message(lambda msg: msg.text == "üìä –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤")
async def choose_asset(msg: Message):
    buttons = [[KeyboardButton(text=asset)] for asset in TRADABLE_ASSETS]
    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await msg.answer("–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
@dp.message(lambda msg: msg.text in TRADABLE_ASSETS or msg.text == "üìà –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
async def send_signal(msg: Message):
    user_id = msg.from_user.id
    asset = msg.text if msg.text in TRADABLE_ASSETS else "BTCUSD"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    now = datetime.utcnow().hour
    if user_id in user_trading_hours:
        hours = user_trading_hours[user_id].get(asset, {}).get("hours")
        if hours:
            start, end = hours
            if not (start <= now <= end):
                await msg.answer(f"‚è∞ –°–µ–π—á–∞—Å –Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è {asset}.")
                return

    # –ó–∞–≥–ª—É—à–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
    signal = f"üîî –°–∏–≥–Ω–∞–ª –ø–æ {asset}:\nüìà Take Profit: +2%\nüìâ Stop Loss: -1.5%"
    await msg.answer(signal)

# –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤
@dp.message(Command("sethours"))
async def set_hours_cmd(msg: Message):
    parts = msg.text.split()
    if len(parts) != 4:
        await msg.answer("–§–æ—Ä–º–∞—Ç: /sethours ASSET START END")
        return
    asset, start, end = parts[1], int(parts[2]), int(parts[3])
    if asset not in TRADABLE_ASSETS:
        await msg.answer("‚õîÔ∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∞–∫—Ç–∏–≤.")
        return

    user_id = msg.from_user.id
    user_trading_hours.setdefault(user_id, {})
    user_trading_hours[user_id].setdefault(asset, {})
    user_trading_hours[user_id][asset]["hours"] = (start, end)

    await msg.answer(f"‚úÖ –ß–∞—Å—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {asset} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {start}:00 - {end}:00")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
