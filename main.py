import asyncio
import logging
from datetime import datetime, time as dtime

import numpy as np
import pandas as pd
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from binance import Client
from binance.helpers import round_step_size
import yfinance as yf

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

ASSETS = ["BTCUSDT", "XAUUSDT", "NAS100"]
SCHEDULE = {symbol: ("00:00", "23:59") for symbol in ASSETS}
current_asset = {}

client = Client()

logging.basicConfig(level=logging.INFO)

# === –ö–ù–û–ü–ö–ò ===
keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
    [KeyboardButton(text="üìà –ê–∫—Ç–∏–≤: BTCUSDT"), KeyboardButton(text="üìà –ê–∫—Ç–∏–≤: XAUUSDT"), KeyboardButton(text="üìà –ê–∫—Ç–∏–≤: NAS100")],
    [KeyboardButton(text="‚è∞ –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (09:00-17:00)")]
], resize_keyboard=True)

# === –ú–û–î–ï–õ–¨ –ü–†–û–ì–ù–û–ó–ê (–ó–ê–ì–õ–£–®–ö–ê) ===
def predict_signal(df: pd.DataFrame) -> dict:
    """–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞"""
    last_close = df["close"].iloc[-1]
    prev_close = df["close"].iloc[-2]
    direction = "Buy" if last_close > prev_close else "Sell"
    accuracy = np.random.randint(55, 95)

    tp_percent = 1.2
    sl_percent = 0.8

    tp_price = round(last_close * (1 + tp_percent / 100), 2) if direction == "Buy" else round(last_close * (1 - tp_percent / 100), 2)
    sl_price = round(last_close * (1 - sl_percent / 100), 2) if direction == "Buy" else round(last_close * (1 + sl_percent / 100), 2)

    return {
        "direction": direction,
        "entry": last_close,
        "tp_percent": tp_percent,
        "sl_percent": sl_percent,
        "tp_price": tp_price,
        "sl_price": sl_price,
        "accuracy": accuracy
    }

# === –î–ê–ù–ù–´–ï –° BINANCE –∏–ª–∏ YAHOO ===
def fetch_data(symbol):
    try:
        if symbol == "NAS100":
            data = yf.download("^NDX", period="5d", interval="15m")
            df = pd.DataFrame({
                "time": data.index,
                "open": data["Open"],
                "high": data["High"],
                "low": data["Low"],
                "close": data["Close"]
            })
        else:
            klines = client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_15MINUTE, limit=50)
            df = pd.DataFrame(klines, columns=["time", "o", "h", "l", "c", "v", "ct", "qv", "nt", "tb", "qtb", "i"])
            df["time"] = pd.to_datetime(df["time"], unit="ms")
            df.rename(columns={"o": "open", "h": "high", "l": "low", "c": "close"}, inplace=True)
            df[["open", "high", "low", "close"]] = df[["open", "high", "low", "close"]].astype(float)
        return df
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# === –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò ===
def is_within_trading_hours(symbol):
    now = datetime.now().time()
    start_str, end_str = SCHEDULE[symbol]
    start = datetime.strptime(start_str, "%H:%M").time()
    end = datetime.strptime(end_str, "%H:%M").time()
    return start <= now <= end

# === –°–ò–ì–ù–ê–õ ===
async def send_signal(user_id, symbol):
    if not is_within_trading_hours(symbol):
        return

    df = fetch_data(symbol)
    if df is None or len(df) < 20:
        await bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        return

    signal = predict_signal(df)
    acc = signal["accuracy"]
    if acc < 60:
        await bot.send_message(user_id, f"‚ö†Ô∏è –†–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ—á–Ω–æ—Å—Ç—å: {acc}%)")
        return
    elif acc >= 65:
        text = (
            f"<b>üìä –°–∏–≥–Ω–∞–ª –ø–æ {symbol}</b>\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{signal['direction']}</b>\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{signal['entry']}</b>\n"
            f"üéØ TP: {signal['tp_percent']}% ({signal['tp_price']})\n"
            f"üõë SL: {signal['sl_percent']}% ({signal['sl_price']})\n"
            f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{acc}%</b>"
        )
        await bot.
send_message(user_id, text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–∏—Ç–∏–µ TP/SL (—ç–º—É–ª—è—Ü–∏—è)
        current_price = df["close"].iloc[-1]
        if (signal["direction"] == "Buy" and current_price >= signal["tp_price"]) or \
           (signal["direction"] == "Sell" and current_price <= signal["tp_price"]):
            await bot.send_message(user_id, "‚úÖ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
        elif (signal["direction"] == "Buy" and current_price <= signal["sl_price"]) or \
             (signal["direction"] == "Sell" and current_price >= signal["sl_price"]):
            await bot.send_message(user_id, "‚ùå SL —Å—Ä–∞–±–æ—Ç–∞–ª!")

# === –•–≠–ù–î–õ–ï–†–´ ===
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id
    current_asset[user_id] = "BTCUSDT"
    await message.answer("üß† <b>–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã</b>", reply_markup=keyboard)

@dp.message(F.text.startswith("üìà –ê–∫—Ç–∏–≤:"))
async def change_asset(message: types.Message):
    asset = message.text.replace("üìà –ê–∫—Ç–∏–≤: ", "").strip()
    user_id = message.from_user.id
    if asset in ASSETS:
        current_asset[user_id] = asset
        await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {asset}")

@dp.message(F.text.startswith("‚è∞ –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏"))
async def set_schedule(message: types.Message):
    user_id = message.from_user.id
    asset = current_asset.get(user_id, "BTCUSDT")
    try:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM –¥–ª—è {asset}")
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")

@dp.message(F.text.contains(":") & F.text.contains("-"))
async def handle_time_input(message: types.Message):
    user_id = message.from_user.id
    asset = current_asset.get(user_id, "BTCUSDT")
    try:
        start, end = message.text.strip().split("-")
        datetime.strptime(start, "%H:%M")
        datetime.strptime(end, "%H:%M")
        SCHEDULE[asset] = (start, end)
        await message.answer(f"‚úÖ –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {asset} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start}-{end}")
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 09:00-17:00")

@dp.message(F.text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
async def manual_signal(message: types.Message):
    user_id = message.from_user.id
    asset = current_asset.get(user_id, "BTCUSDT")
    await send_signal(user_id, asset)

# === –ê–í–¢–û–°–ò–ì–ù–ê–õ ===
async def autosignal_loop():
    while True:
        for user_id, asset in current_asset.items():
            df = fetch_data(asset)
            if df is not None:
                signal = predict_signal(df)
                if signal["accuracy"] >= 70:
                    await send_signal(user_id, asset)
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# === –ó–ê–ü–£–°–ö ===
async def main():
    asyncio.create_task(autosignal_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
