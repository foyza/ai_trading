import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
import numpy as np
import random

API_TOKEN = '8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA'
TWELVE_DATA_KEY = '5e5e950fa71c416e9ffdb86fce72dc4f'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

assets = {
    'BTCUSDT': {'binance_symbol': 'BTCUSDT', 'twelve_symbol': 'BTC/USD'},
    'XAUUSD': {'binance_symbol': 'XAUUSDT', 'twelve_symbol': 'XAU/USD'},
    'NAS100': {'binance_symbol': None, 'twelve_symbol': 'NDX/USD'}
}

selected_asset = {}
mute_status = {}

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª')],
        [KeyboardButton(text='BTCUSDT'), KeyboardButton(text='XAUUSD'), KeyboardButton(text='NAS100')],
        [KeyboardButton(text='üîï Mute'), KeyboardButton(text='üîî Unmute')]
    ],
    resize_keyboard=True
)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Binance ---
async def get_binance_price(symbol):
    try:
        url = f'https://api.binance.com/api/v3/ticker/price?symbol={symbol}'
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                return float(data['price'])
    except Exception as e:
        logging.error(f"Binance error: {e}")
        return None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å TwelveData ---
async def get_twelve_data_price(symbol):
    try:
        url = f'https://api.twelvedata.com/price?symbol={symbol}&apikey={TWELVE_DATA_KEY}'
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                logging.info(f"TwelveData price response for {symbol}: {data}")
                return float(data['price']) if 'price' in data else None
    except Exception as e:
        logging.error(f"TwelveData error: {e}")
        return None

# --- –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Å–∏–≥–Ω–∞–ª ---
def generate_signal():
    accuracy = round(random.uniform(50, 90), 2)
    direction = random.choice(['Buy', 'Sell'])
    tp_percent = round(random.uniform(1, 3), 2)
    sl_percent = round(random.uniform(0.5, 2), 2)
    return accuracy, direction, tp_percent, sl_percent

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id
    selected_asset[user_id] = 'BTCUSDT'
    mute_status[user_id] = False
    await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text in assets:
        selected_asset[user_id] = text
        await message.answer(f"–í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤: {text}")

    elif text == 'üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª':
        await send_signal(message, manual=True)

    elif text == 'üîï Mute':
        mute_status[user_id] = True
        await message.answer("üîï –†–µ–∂–∏–º Mute –≤–∫–ª—é—á–µ–Ω. –°–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –±–µ–∑ –∑–≤—É–∫–∞.")

    elif text == 'üîî Unmute':
        mute_status[user_id] = False
        await message.answer("üîî –†–µ–∂–∏–º Mute –≤—ã–∫–ª—é—á–µ–Ω. –°–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç —Å–æ –∑–≤—É–∫–æ–º.")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ ---
async def send_signal(message, manual=False):
    user_id = message.from_user.id
    asset = selected_asset.get(user_id, 'BTCUSDT')
    config = assets[asset]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ Binance
    price_binance = await get_binance_price(config['binance_symbol']) if config['binance_symbol'] else None

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ TwelveData
    price_twelve = await get_twelve_data_price(config['twelve_symbol'])

    entry_price = price_twelve or price_binance

    if entry_price is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞.")
        return
        
accuracy, direction, tp_pct, sl_pct = generate_signal()
    if manual and accuracy < 65:
        await message.answer(f"‚ö†Ô∏è –†–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ({accuracy}%)")
        return
    elif not manual and accuracy < 70:
        return

    tp_price = entry_price * (1 + tp_pct / 100) if direction == 'Buy' else entry_price * (1 - tp_pct / 100)
    sl_price = entry_price * (1 - sl_pct / 100) if direction == 'Buy' else entry_price * (1 + sl_pct / 100)

    message_text = (
        f"üìà –°–∏–≥–Ω–∞–ª –ø–æ {asset}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
        f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}%\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}\n"
        f"üéØ TP: +{tp_pct}% ‚Üí {tp_price:.2f}\n"
        f"üõë SL: -{sl_pct}% ‚Üí {sl_price:.2f}"
    )

    if mute_status.get(user_id, False):
        await message.answer(message_text, disable_notification=True)
    else:
        await message.answer(message_text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP –∏–ª–∏ SL
    await asyncio.sleep(10)  # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    current_price = await get_twelve_data_price(config['twelve_symbol']) or await get_binance_price(config['binance_symbol'])

    if not current_price:
        return

    if (direction == 'Buy' and current_price >= tp_price) or (direction == 'Sell' and current_price <= tp_price):
        await message.answer(f"‚úÖ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {current_price:.2f}")
    elif (direction == 'Buy' and current_price <= sl_price) or (direction == 'Sell' and current_price >= sl_price):
        await message.answer(f"‚ùå SL –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {current_price:.2f}")

# --- –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫ ---
async def auto_signal_loop():
    while True:
        for user_id in selected_asset:
            await send_signal(types.Message(chat={'id': user_id}, from_user={'id': user_id}), manual=False)
        await asyncio.sleep(30)

async def main():
    asyncio.create_task(auto_signal_loop())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
