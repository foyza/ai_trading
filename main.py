import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from aiogram.enums import ParseMode
from datetime import datetime
from aiogram.fsm.storage.memory import MemoryStorage
import yfinance as yf
import numpy as np
import random

TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
ASSETS = {"BTCUSD": "BTC-USD", "XAUUSD": "XAUUSD=X", "USTECH100": "^NDX"}
user_settings = {}  # –•—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤", callback_data="set_asset")],
        [InlineKeyboardButton("üïí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="set_schedule")],
        [InlineKeyboardButton("üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="manual_signal")]
    ])

def asset_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(a, callback_data=f"asset:{a}") for a in ASSETS.keys()]
    ])

def days_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("–ë—É–¥–Ω–∏", callback_data="days:weekdays"),
         InlineKeyboardButton("–í—ã—Ö–æ–¥–Ω—ã–µ", callback_data="days:weekends")],
        [InlineKeyboardButton("–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", callback_data="days:all")]
    ])

def hours_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"{h}:00", callback_data=f"hours:{h}") for h in range(0, 24, 6)],
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="hours:confirm")]
    ])

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(F.text == "/start")
async def cmd_start(msg: Message):
    user_settings[msg.from_user.id] = {
        "asset": "BTCUSD",
        "days": "all",
        "hours": list(range(24))
    }
    await msg.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã", reply_markup=main_kb())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query(F.data == "set_asset")
async def cb_set_asset(c: CallbackQuery):
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:", reply_markup=asset_kb())

@dp.callback_query(F.data.startswith("asset:"))
async def cb_asset(c: CallbackQuery):
    a = c.data.split(":")[1]
    user_settings[c.from_user.id]["asset"] = a
    await c.message.edit_text(f"–ê–∫—Ç–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{a}</b>", reply_markup=main_kb())

@dp.callback_query(F.data == "set_schedule")
async def cb_set_schedule(c: CallbackQuery):
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏:", reply_markup=days_kb())

@dp.callback_query(F.data.startswith("days:"))
async def cb_days(c: CallbackQuery):
    arg = c.data.split(":")[1]
    s = user_settings[c.from_user.id]
    s["days"] = arg
    if arg == "all":
        s["hours"] = list(range(24))
        await c.message.edit_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", reply_markup=main_kb())
    else:
        s["hours_temp"] = []
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—ã (–∫–∞–∂–¥—ã–µ 6 —á):", reply_markup=hours_kb())

@dp.callback_query(F.data.startswith("hours:"))
async def cb_hours(c: CallbackQuery):
    arg = c.data.split(":")[1]
    uid = c.from_user.id
    s = user_settings[uid]
    if arg == "confirm":
        s["hours"] = s.pop("hours_temp", [])
        await c.message.edit_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=main_kb())
    else:
        h = int(arg)
        temp = s.setdefault("hours_temp", [])
        if h in temp:
            temp.remove(h)
        else:
            temp.append(h)
        await c.answer(f"–í—ã–±—Ä–∞–Ω–æ: {sorted(temp)}", show_alert=False)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ ---
def gen_signal(ticker: str):
    try:
        df = yf.download(ticker, period="1d", interval="1m", progress=False)
        if df.empty:
            return None
        price = float(df["Close"].iloc[-1])
    except:
        return None

    acc = round(random.uniform(50, 100), 2)
    if acc < 60:
        return {"status": "low", "accuracy": acc}
    direction = random.choice(["Buy", "Sell"])
    entry = price
    tp_pct = 2
    sl_pct = 1.5
tp_price = round(entry * (1 + tp_pct/100 if direction=="Buy" else 1 - tp_pct/100), 2)
    sl_price = round(entry * (1 - sl_pct/100 if direction=="Buy" else 1 + sl_pct/100), 2)

    return {
        "status": "ok", "direction": direction,
        "entry": round(entry,2),
        "tp_pct": tp_pct, "tp_price": tp_price,
        "sl_pct": sl_pct, "sl_price": sl_price,
        "accuracy": acc
    }

# --- –†—É—á–Ω–æ–π —Å–∏–≥–Ω–∞–ª ---
@dp.callback_query(F.data == "manual_signal")
async def cb_manual(c: CallbackQuery):
    cfg = user_settings[c.from_user.id]
    sig = gen_signal(ASSETS[cfg["asset"]])
    if not sig or sig["status"]=="low":
        txt = f"‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å: {sig['accuracy'] if sig else '?'}% ‚Äî —Ä–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
    elif sig["accuracy"] < 65:
        txt = f"‚õîÔ∏è –¢–æ—á–Ω–æ—Å—Ç—å: {sig['accuracy']}% —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"
    else:
        txt = (f"üìä <b>{cfg['asset']}</b>\n"
               f"üîÅ {sig['direction']}\n"
               f"üéØ –í—Ö–æ–¥: {sig['entry']}\n"
               f"üìà TP¬†+{sig['tp_pct']}% ‚Üí {sig['tp_price']}\n"
               f"üõë SL¬†‚àí{sig['sl_pct']}% ‚Üí {sig['sl_price']}\n"
               f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {sig['accuracy']}%")
    await c.message.answer(txt, reply_markup=main_kb())

# --- –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª –∫–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ ---
async def auto_loop():
    while True:
        now = datetime.now()
        for uid, s in user_settings.items():
            weekday = now.weekday()
            if s["days"]=="weekdays" and weekday>=5 or s["days"]=="weekends" and weekday<5:
                continue
            if now.hour not in s["hours"]:
                continue
            sig = gen_signal(ASSETS[s["asset"]])
            if sig and sig["status"]=="ok" and sig["accuracy"]>=70:
                txt = (f"ü§ñ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª –ø–æ <b>{s['asset']}</b>\n"
                       f"üîÅ {sig['direction']}\n"
                       f"üéØ –í—Ö–æ–¥: {sig['entry']}\n"
                       f"üìà TP¬†+{sig['tp_pct']}% ‚Üí {sig['tp_price']}\n"
                       f"üõë SL¬†‚àí{sig['sl_pct']}% ‚Üí {sig['sl_price']}\n"
                       f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {sig['accuracy']}%")
                await bot.send_message(uid, txt, reply_markup=main_kb())
        await asyncio.sleep(60)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(auto_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
