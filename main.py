import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
import numpy as np
import pandas as pd

TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"
TWELVEDATA_API_KEY = "5e5e950fa71c416e9ffdb86fce72dc4f"
ASSETS = ['BTC/USD', 'XAU/USD', 'USTECH100']

# –î–æ–±–∞–≤–ª–µ–Ω —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–æ–≤ —Å–∏–º–≤–æ–ª–∞–º TwelveData API
TWELVE_SYMBOLS = {
    'BTC/USD': 'BTC/USD',
    'XAU/USD': 'XAU/USD', 
    'USTECH100': 'USTECH100'  # Nasdaq 100 –∏–Ω–¥–µ–∫—Å
}

dp = Dispatcher()
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
logging.basicConfig(level=logging.INFO)

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}  # {user_id: {"asset": ..., "muted": False, "strategy": ..., ...}}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
            [KeyboardButton(text="BTC/USD"), KeyboardButton(text="XAU/USD"), KeyboardButton(text="USTECH100")],
            [KeyboardButton(text="üîï Mute"), KeyboardButton(text="üîî Unmute")],
            [KeyboardButton(text="üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è"), KeyboardButton(text="üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")]
        ],
        resize_keyboard=True
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö –æ—Ç TwelveData
async def get_twelvedata(asset):
    symbol = TWELVE_SYMBOLS.get(asset)
    if not symbol:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫—Ç–∏–≤ –¥–ª—è TwelveData: {asset}")
    
    url = f"https://api.twelvedata.com/time_series"
    params = {
        "symbol": symbol,
        "interval": "1min",
        "outputsize": 50,
        "apikey": TWELVEDATA_API_KEY,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                data = await response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ API
                if "status" in data and data["status"] == "error":
                    error_msg = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                    if "plan" in error_msg.lower() or "upgrade" in error_msg.lower():
                        raise ValueError(f"–ê–∫—Ç–∏–≤ {asset} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ TwelveData")
                    else:
                        raise ValueError(f"–û—à–∏–±–∫–∞ API: {error_msg}")
                
                if "values" not in data:
                    logging.error(f"TwelveData API error: {data}")
                    raise ValueError(f"TwelveData API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è {asset}")
                
                df = pd.DataFrame(data["values"])
                if df.empty:
                    raise ValueError(f"–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {asset}")
                    
                df["datetime"] = pd.to_datetime(df["datetime"])
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ float
                numeric_columns = ["open", "high", "low", "close", "volume"]
                for col in numeric_columns:
                    if col in df.columns:
                        df[col] = pd.to_numeric(df[col], errors='coerce')
                
                df = df.sort_values("datetime")
                return df
    except Exception as e:
        logging.error(f"Error fetching data for {asset}: {e}")
        return None

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
def analyze(df):
    if len(df) < 100:
        return "neutral", 0, 0
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ close - —ç—Ç–æ —á–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
    df["close"] = pd.to_numeric(df["close"], errors='coerce')
    df["high"] = pd.to_numeric(df["high"], errors='coerce')
    df["low"] = pd.to_numeric(df["low"], errors='coerce')
    df["volume"] = pd.to_numeric(df["volume"], errors='coerce')
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ moving averages –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    df["ma10"] = df["close"].rolling(window=10).mean()
    df["ma20"] = df["close"].rolling(window=20).mean()
    df["ma50"] = df["close"].rolling(window=50).mean()
    
    # RSI —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
    df["rsi14"] = compute_rsi(df["close"], 14)
    df["rsi21"] = compute_rsi(df["close"], 21)
    
    # MACD —Å —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π
    df["macd"], df["macd_signal"] = compute_macd_signal(df["close"])
    df["macd_histogram"] = df["macd"] - df["macd_signal"]
    
    # Bollinger Bands
    df["bb_upper"], df["bb_lower"], df["bb_middle"] = compute_bollinger_bands(df["close"])
    
    # Stochastic Oscillator
    df["stoch_k"], df["stoch_d"] = compute_stochastic(df["high"], df["low"], df["close"])
    
    # Volume analysis
    df["volume_ma"] = df["volume"].rolling(window=20).mean()

    latest = df.iloc[-1]
    prev = df.iloc[-2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è
    required_fields = ["ma10", "ma20", "ma50", "rsi14", "rsi21", "macd", "macd_signal", 
                      "bb_upper", "bb_lower", "stoch_k", "stoch_d"]
    if any(pd.isna(latest[field]) for field in required_fields):
        return "neutral", 0, latest["close"]
    
    signals = []
    signal_strengths = []
    
    # 1. –¢—Ä–µ–Ω–¥ –ø–æ MA (–≤–µ—Å: 25%)
    if latest["ma10"] > latest["ma20"] > latest["ma50"]:
        if latest["close"] > latest["ma10"]:
            signals.append("buy")
            signal_strengths.append(25)
    elif latest["ma10"] < latest["ma20"] < latest["ma50"]:
        if latest["close"] < latest["ma10"]:
            signals.append("sell")
            signal_strengths.append(25)
    
    # 2. RSI –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–≤–µ—Å: 20%)
    if latest["rsi14"] < 30 and latest["rsi21"] < 35:
        signals.append("buy")
        signal_strengths.append(20)
    elif latest["rsi14"] > 70 and latest["rsi21"] > 65:
        signals.append("sell")
        signal_strengths.append(20)
    elif 40 < latest["rsi14"] < 60 and 40 < latest["rsi21"] < 60:
        # RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ - –∏—â–µ–º –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é —Å MACD
        if latest["macd"] > prev["macd"] and latest["macd"] > latest["macd_signal"]:
            signals.append("buy")
            signal_strengths.append(10)
        elif latest["macd"] < prev["macd"] and latest["macd"] < latest["macd_signal"]:
            signals.append("sell")
            signal_strengths.append(10)
    
    # 3. MACD —Å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–æ–π (–≤–µ—Å: 20%)
    if (latest["macd"] > latest["macd_signal"] and 
        latest["macd_histogram"] > prev["macd_histogram"] and
        latest["macd_histogram"] > 0):
        signals.append("buy")
        signal_strengths.append(20)
    elif (latest["macd"] < latest["macd_signal"] and 
          latest["macd_histogram"] < prev["macd_histogram"] and
          latest["macd_histogram"] < 0):
        signals.append("sell")
        signal_strengths.append(20)
    
    # 4. Bollinger Bands (–≤–µ—Å: 15%)
    if latest["close"] < latest["bb_lower"] and prev["close"] >= prev["bb_lower"]:
        signals.append("buy")
        signal_strengths.append(15)
    elif latest["close"] > latest["bb_upper"] and prev["close"] <= prev["bb_upper"]:
        signals.append("sell")
        signal_strengths.append(15)
    
    # 5. Stochastic (–≤–µ—Å: 10%)
    if latest["stoch_k"] < 20 and latest["stoch_d"] < 20 and latest["stoch_k"] > latest["stoch_d"]:
        signals.append("buy")
        signal_strengths.append(10)
    elif latest["stoch_k"] > 80 and latest["stoch_d"] > 80 and latest["stoch_k"] < latest["stoch_d"]:
        signals.append("sell")
        signal_strengths.append(10)
    
    # 6. Volume confirmation (–≤–µ—Å: 10%)
    if not pd.isna(latest["volume"]) and not pd.isna(latest["volume_ma"]):
        if latest["volume"] > latest["volume_ma"] * 1.5:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            if len(signals) > 0:
                signal_strengths.append(10)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    buy_strength = sum(strength for signal, strength in zip(signals, signal_strengths) if signal == "buy")
    sell_strength = sum(strength for signal, strength in zip(signals, signal_strengths) if signal == "sell")
    
    total_possible = 100
    
    if buy_strength >= 60:  # –ú–∏–Ω–∏–º—É–º 60% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        direction = "buy"
        accuracy = min(95, buy_strength + 15)  # –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif sell_strength >= 60:
        direction = "sell" 
        accuracy = min(95, sell_strength + 15)
    else:
        direction = "neutral"
        accuracy = max(buy_strength, sell_strength)

    return direction, int(accuracy), latest["close"]

def compute_rsi(series, period=14):
    if len(series) < period:
        return pd.Series([np.nan] * len(series), index=series.index)
    
    delta = series.diff()
    up = delta.clip(lower=0)
    down = -delta.clip(upper=0)
    ma_up = up.rolling(window=period).mean()
    ma_down = down.rolling(window=period).mean()
    rs = ma_up / ma_down
    return 100 - (100 / (1 + rs))

def compute_macd_signal(series):
    if len(series) < 26:
        return pd.Series([np.nan] * len(series), index=series.index), pd.Series([np.nan] * len(series), index=series.index)
    
    ema12 = series.ewm(span=12, adjust=False).mean()
    ema26 = series.ewm(span=26, adjust=False).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal

def compute_bollinger_bands(series, period=20, std_dev=2):
    if len(series) < period:
        return (pd.Series([np.nan] * len(series), index=series.index),
                pd.Series([np.nan] * len(series), index=series.index),
                pd.Series([np.nan] * len(series), index=series.index))
    
    middle = series.rolling(window=period).mean()
    std = series.rolling(window=period).std()
    upper = middle + (std * std_dev)
    lower = middle - (std * std_dev)
    return upper, lower, middle

def compute_stochastic(high, low, close, k_period=14, d_period=3):
    if len(close) < k_period:
        return (pd.Series([np.nan] * len(close), index=close.index),
                pd.Series([np.nan] * len(close), index=close.index))
    
    lowest_low = low.rolling(window=k_period).min()
    highest_high = high.rolling(window=k_period).max()
    k_percent = 100 * ((close - lowest_low) / (highest_high - lowest_low))
    d_percent = k_percent.rolling(window=d_period).mean()
    return k_percent, d_percent

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(user_id, asset, manual=False):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä manual
    try:
        df = await get_twelvedata(asset)
        if df is None or len(df) < 100:
            await bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {asset}")
            return

        direction, accuracy, price = analyze(df)
        
        if accuracy < 75 and not manual:  # –ü–æ–≤—ã—à–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤
            if manual:
                await bot.send_message(user_id, f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: {accuracy}%. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–æ–∂–¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.")
            return
            
        if direction == "neutral":
            if manual:
                await bot.send_message(user_id, f"‚ö†Ô∏è –†—ã–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏. –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}%")
            return

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ TP/SL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–∞ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if asset == "BTC/USD":
            tp_pct, sl_pct = 1.5, 0.8
        elif asset == "XAU/USD":
            tp_pct, sl_pct = 1.2, 0.6
        elif asset == "USTECH100":
            tp_pct, sl_pct = 1.0, 0.5
        else:
            tp_pct, sl_pct = 1.5, 0.8

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
        confidence_multiplier = accuracy / 100
        tp_pct *= confidence_multiplier
        sl_pct *= confidence_multiplier

        tp_price = round(price * (1 + tp_pct / 100), 2) if direction == "buy" else round(price * (1 - tp_pct / 100), 2)
        sl_price = round(price * (1 - sl_pct / 100), 2) if direction == "buy" else round(price * (1 + sl_pct / 100), 2)

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy_emoji = "üî•" if accuracy >= 90 else "‚ö°" if accuracy >= 80 else "üìä"
        
        msg = (
            f"{accuracy_emoji} <b>–¢–û–ß–ù–´–ô –°–ò–ì–ù–ê–õ</b> {accuracy_emoji}\n"
            f"üìà –ê–∫—Ç–∏–≤: <b>{asset}</b>\n"
            f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{direction.upper()}</b>\n"
            f"üí∞ –í—Ö–æ–¥: <b>{price}</b>\n"
            f"üü¢ TP: +{tp_pct:.1f}% ‚Üí <b>{tp_price}</b>\n"
            f"üî¥ SL: -{sl_pct:.1f}% ‚Üí <b>{sl_price}</b>\n"
            f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: <b>{accuracy}%</b>\n"
            f"üìä –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"
        )
        mute = user_settings.get(user_id, {}).get("muted", False)
        await bot.send_message(user_id, msg, disable_notification=mute)
        
    except Exception as e:
        logging.error(f"Error in send_signal: {e}")
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    user_settings[message.from_user.id] = {"asset": "BTC/USD", "muted": False, "strategy": "ma+rsi+macd"}
    welcome_msg = (
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Signals Bot!\n\n"
        "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã:\n"
        "‚Ä¢ BTC/USD - –ë–∏—Ç–∫–æ–∏–Ω\n"
        "‚Ä¢ XAU/USD - –ó–æ–ª–æ—Ç–æ\n"  
        "‚Ä¢ USTECH100 - Nasdaq 100\n\n"
        "üéØ –¢–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º:\n"
        "‚Ä¢ Moving Averages (3 –ø–µ—Ä–∏–æ–¥–∞)\n"
        "‚Ä¢ RSI (2 –ø–µ—Ä–∏–æ–¥–∞)\n"
        "‚Ä¢ MACD + —Å–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è\n"
        "‚Ä¢ Bollinger Bands\n"
        "‚Ä¢ Stochastic Oscillator\n"
        "‚Ä¢ –û–±—ä–µ–º—ã\n\n"
        "‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 75%"
    )
    await message.answer(welcome_msg, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message()
async def handle_buttons(message: types.Message):
    uid = message.from_user.id
    text = message.text
    if uid not in user_settings:
        user_settings[uid] = {"asset": "BTC/USD", "muted": False, "strategy": "ma+rsi+macd"}

    if text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        await send_signal(uid, user_settings[uid]["asset"], manual=True)
    elif text in ASSETS:
        user_settings[uid]["asset"] = text
        await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}")
    elif text == "üîï Mute":
        user_settings[uid]["muted"] = True
        await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    elif text == "üîî Unmute":
        user_settings[uid]["muted"] = False
        await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    elif text == "üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è":
        strategy_info = (
            "üéØ <b>–ú–ù–û–ì–û–£–†–û–í–ù–ï–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø</b>\n\n"
            "üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≤–µ—Å–∞):</b>\n"
            "‚Ä¢ Moving Averages - 25%\n"
            "‚Ä¢ RSI (14+21) - 20%\n" 
            "‚Ä¢ MACD + Signal - 20%\n"
            "‚Ä¢ Bollinger Bands - 15%\n"
            "‚Ä¢ Stochastic - 10%\n"
            "‚Ä¢ Volume - 10%\n\n"
            "‚ö° <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 60% –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞\n"
            "‚Ä¢ 75%+ –¥–ª—è –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ 85%+ –¥–ª—è premium –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
            "üî• <b>–¢–æ—á–Ω–æ—Å—Ç—å 90%+</b> - —Å–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã!"
        )
        await message.answer(strategy_info)
    elif text == "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
    elif text == "üìä –°—Ç–∞—Ç—É—Å":
        asset = user_settings[uid]["asset"]
        mute = "üîï" if user_settings[uid]["muted"] else "üîî"
        strategy = user_settings[uid]["strategy"]
        await message.answer(f"üìä –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤: {asset}\nüîî –ó–≤—É–∫: {mute}\nüéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")

# –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å >70%)
async def auto_signal_loop():
    while True:
        try:
            for uid, settings in user_settings.items():
                try:
                    asset = settings["asset"]
                    df = await get_twelvedata(asset)
                    if df is None or len(df) < 50:
                        continue
                    direction, accuracy, _ = analyze(df)
                    if direction != "neutral" and accuracy >= 85:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–∞–º
                        await send_signal(uid, asset)
                except Exception as e:
                    logging.error(f"Error processing user {uid}: {e}")
                    continue
        except Exception as e:
            logging.error(f"Error in auto_signal_loop: {e}")
        
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(auto_signal_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
