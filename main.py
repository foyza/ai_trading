import asyncio
import logging
from datetime import datetime, time
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from binance.client import Client
import yfinance as yf
import numpy as np
import pandas as pd

# === Telegram bot token ===
BOT_TOKEN = "8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA"

# === –ê–∫—Ç–∏–≤—ã –∏ Binance —Ç–∏–∫–µ—Ä—ã ===
ASSETS = {
    "BTCUSDT": "BTCUSDT",
    "XAUUSDT": "XAUUSDT",
    "NAS100": "^NDX"
}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
user_data = {}

# === –ö–Ω–æ–ø–∫–∏ ===
menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
    [KeyboardButton(text="üìä –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤"), KeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")]
], resize_keyboard=True)

assets_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="BTCUSDT")],
    [KeyboardButton(text="XAUUSDT")],
    [KeyboardButton(text="NAS100")]
], resize_keyboard=True)

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
@dp.message(CommandStart())
async def start(message: Message):
    user_data[message.chat.id] = {
        "asset": "BTCUSDT",
        "schedules": {
            "BTCUSDT": ("00:00", "23:59"),
            "XAUUSDT": ("00:00", "23:59"),
            "NAS100": ("00:00", "23:59")
        }
    }
    await message.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# === –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª ===
@dp.message(F.text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
async def handle_signal(message: Message):
    chat_id = message.chat.id
    asset = user_data.get(chat_id, {}).get("asset", "BTCUSDT")

    if not is_in_trading_time(chat_id, asset):
        await message.answer("‚è∞ –í–Ω–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏.")
        return

    signal = get_signal(asset)
    if not signal:
        await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    confidence, direction, entry_price, tp_price, sl_price, tp_pct, sl_pct = signal

    if confidence < 60:
        await message.answer(f"‚ö†Ô∏è –†–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ—á–Ω–æ—Å—Ç—å: {confidence:.2f}%)")
    elif confidence >= 65:
        await message.answer(
            f"üìà –ê–∫—Ç–∏–≤: {asset}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}\n"
            f"üéØ TP: {tp_pct:.2f}% ‚Üí {tp_price:.2f}\n"
            f"üõ° SL: {sl_pct:.2f}% ‚Üí {sl_price:.2f}\n"
            f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {confidence:.2f}%"
        )

# === –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤ ===
@dp.message(F.text == "üìä –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤")
async def choose_asset(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:", reply_markup=assets_keyboard)

@dp.message(F.text.in_(ASSETS.keys()))
async def set_asset(message: Message):
    user_data[message.chat.id]["asset"] = message.text
    await message.answer(f"–ê–∫—Ç–∏–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}")

# === –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è ===
@dp.message(F.text == "üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")
async def ask_time(message: Message):
    asset = user_data[message.chat.id]["asset"]
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 08:00-16:00 –¥–ª—è –∞–∫—Ç–∏–≤–∞ {asset}:")

@dp.message(F.text.regexp(r"^\d{2}:\d{2}-\d{2}:\d{2}$"))
async def save_time(message: Message):
    asset = user_data[message.chat.id]["asset"]
    start_str, end_str = message.text.split("-")
    user_data[message.chat.id]["schedules"][asset] = (start_str, end_str)
    await message.answer(f"–í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {asset} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start_str}‚Äì{end_str}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ===
def is_in_trading_time(chat_id, asset):
    now = datetime.now().time()
    start_str, end_str = user_data.get(chat_id, {}).get("schedules", {}).get(asset, ("00:00", "23:59"))
    start = datetime.strptime(start_str, "%H:%M").time()
    end = datetime.strptime(end_str, "%H:%M").time()
    return start <= now <= end

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ ===
def get_signal(asset):
    try:
        if asset == "NAS100":
            df = yf.download(ASSETS[asset], period="7d", interval="15m")
            price = df['Close'].iloc[-1]
        else:
            client = Client()
            klines = client.
get_klines(symbol=ASSETS[asset], interval=Client.KLINE_INTERVAL_15MINUTE, limit=100)
            close_prices = [float(k[4]) for k in klines]
            price = close_prices[-1]
            df = pd.DataFrame({'Close': close_prices})

        df['SMA'] = df['Close'].rolling(window=10).mean()
        df.dropna(inplace=True)

        if df.empty:
            return None

        latest_price = df['Close'].iloc[-1]
        sma = df['SMA'].iloc[-1]
        direction = "Buy" if latest_price > sma else "Sell"
        confidence = np.clip(np.random.normal(loc=72 if direction == "Buy" else 68, scale=5), 50, 100)

        tp_pct = 1.5
        sl_pct = 1.0

        tp_price = latest_price * (1 + tp_pct / 100) if direction == "Buy" else latest_price * (1 - tp_pct / 100)
        sl_price = latest_price * (1 - sl_pct / 100) if direction == "Buy" else latest_price * (1 + sl_pct / 100)

        return confidence, direction, latest_price, tp_price, sl_price, tp_pct, sl_pct

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None

# === –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ >70% ===
async def auto_signal_loop():
    while True:
        for chat_id, data in user_data.items():
            asset = data["asset"]
            if not is_in_trading_time(chat_id, asset):
                continue

            signal = get_signal(asset)
            if signal:
                confidence, direction, entry_price, tp_price, sl_price, tp_pct, sl_pct = signal
                if confidence >= 70:
                    await bot.send_message(
                        chat_id,
                        f"üì° [–ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª]\n"
                        f"–ê–∫—Ç–∏–≤: {asset}\n"
                        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
                        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}\n"
                        f"üéØ TP: {tp_pct:.2f}% ‚Üí {tp_price:.2f}\n"
                        f"üõ° SL: {sl_pct:.2f}% ‚Üí {sl_price:.2f}\n"
                        f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {confidence:.2f}%"
                    )
        await asyncio.sleep(60)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(auto_signal_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
