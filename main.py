import logging
import asyncio
import json
from datetime import datetime, time
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
import httpx
import os

API_KEY = '8102268947:AAH24VSlY8LbGDJcXmlBstmdjLt1AmH2CBA'
TWELVE_DATA_API_KEY = '5e5e950fa71c416e9ffdb86fce72dc4f'

bot = Bot(token=API_KEY)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

user_data = {}

KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")],
        [KeyboardButton(text="BTCUSD / XAUUSD / EURUSD")],
        [KeyboardButton(text="üîï Mute / üîî Unmute")],
        [KeyboardButton(text="üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è")],
        [KeyboardButton(text="üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")]
    ],
    resize_keyboard=True
)

AVAILABLE_SYMBOLS = ["BTC/USD", "XAU/USD", "EUR/USD"]
DEFAULT_STRATEGY = "MA+RSI+MACD"

async def get_market_data(symbol: str):
    url = f"https://api.twelvedata.com/time_series?symbol={symbol}&interval=15min&outputsize=50&apikey={TWELVE_DATA_API_KEY}"
    async with httpx.AsyncClient() as client:
        r = await client.get(url)
        return r.json()

def calculate_signals(data, strategy):
    if strategy == "MA+RSI+MACD":
        return {"signal": "Buy", "confidence": 75, "tp": 1.5, "sl": 1.0, "price": float(data['values'][0]['close'])}
    elif strategy == "Bollinger+Stochastic":
        return {"signal": "Sell", "confidence": 72, "tp": 2.0, "sl": 1.5, "price": float(data['values'][0]['close'])}
    return None

@dp.message(CommandStart())
async def start(msg: types.Message):
    user_id = msg.from_user.id
    user_data[user_id] = {
        "asset": "BTC/USD",
        "mute": False,
        "strategy": DEFAULT_STRATEGY,
        "schedule": {},
    }
    await msg.answer("–ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã", reply_markup=KEYBOARD)

@dp.message()
async def handle(msg: types.Message):
    user_id = msg.from_user.id
    text = msg.text

    if user_id not in user_data:
        await start(msg)
        return

    if text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        asset = user_data[user_id]["asset"]
        strategy = user_data[user_id]["strategy"]
        data = await get_market_data(asset.replace("/", ""))
        signal = calculate_signals(data, strategy)
        if signal:
            if signal["confidence"] < 60:
                await msg.answer(f"‚ö†Ô∏è –†–∏—Å–∫ –≤–µ–ª–∏–∫, –Ω–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ—á–Ω–æ—Å—Ç—å: {signal['confidence']}%)")
            else:
                await msg.answer(
                    f"üìà –°–∏–≥–Ω–∞–ª –ø–æ {asset}:\n"
                    f"üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['signal']}\n"
                    f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal['price']}\n"
                    f"üéØ Take-Profit: +{signal['tp']}%\n"
                    f"üõë Stop-Loss: -{signal['sl']}%\n"
                    f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {signal['confidence']}%"
                )
        else:
            await msg.answer("–ù–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")

    elif text == "BTCUSD / XAUUSD / EURUSD":
        current = user_data[user_id]["asset"]
        index = AVAILABLE_SYMBOLS.index(current)
        user_data[user_id]["asset"] = AVAILABLE_SYMBOLS[(index + 1) % len(AVAILABLE_SYMBOLS)]
        await msg.answer(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫—Ç–∏–≤: {user_data[user_id]['asset']}")

    elif text == "üîï Mute / üîî Unmute":
        user_data[user_id]["mute"] = not user_data[user_id]["mute"]
        status = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã" if user_data[user_id]["mute"] else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
        await msg.answer(status)

    elif text == "üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è":
        strategy = user_data[user_id]["strategy"]
        if strategy == "MA+RSI+MACD":
            user_data[user_id]["strategy"] = "Bollinger+Stochastic"
        else:
            user_data[user_id]["strategy"] = "MA+RSI+MACD"
        await msg.answer(f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {user_data[user_id]['strategy']}")

    elif text == "üìä –°—Ç–∞—Ç—É—Å":
        u = user_data[user_id]
        mute = "üîï" if u["mute"] else "üîî"
        await msg.answer(
            f"üìä –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–ê–∫—Ç–∏–≤: {u['asset']}\n"
            f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {u['strategy']}\n"
            f"Mute: {mute}"
        )

    elif text == "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await msg.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")

async def auto_send_signals():
    while True:
        for user_id, data in user_data.items():
            if data["mute"]:
                continue
            asset = data["asset"]
            strategy = data["strategy"]
            market_data = await get_market_data(asset.replace("/", ""))
            signal = calculate_signals(market_data, strategy)
            if signal and signal["confidence"] > 70:
                try:
                    await bot.send_message(
                        user_id,
                        f"üìà –ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª –ø–æ {asset}:\n"
                        f"üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['signal']}\n"
                        f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal['price']}\n"
                        f"üéØ Take-Profit: +{signal['tp']}%\n"
                        f"üõë Stop-Loss: -{signal['sl']}%\n"
                        f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {signal['confidence']}%"
                    )
                except Exception:
                    continue
        await asyncio.sleep(900)  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

async def main():
    asyncio.create_task(auto_send_signals())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
